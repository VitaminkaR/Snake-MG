using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Worms
{
    class JsonConverterMap : JsonConverter<Map>
    {
        public override Map Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // "\"s=100,pc=10,rc=50,ac=100, p=[61,70],[24,4],[94,26],[57,89],[95,74],[68,38],[68,78],[14,9],[49,68],[67,67],r=[76,29],[60,35],[12,48],[20,39],[88,80],[35,91],[22,65],[55,65],[94,60],[54,92],[23,74],[78,28],[15,73],[49,49],[54,39],[46,90],[6,51],[85,5],[82,62],[64,20],[77,89],[73,86],[13,50],[88,74],[95,21],[84,61],[86,46],[18,74],[22,5],[91,10],[71,43],[57,23],[7,16],[58,43],[52,23],[55,6],[68,7],[87,5],[73,64],[87,37],[57,46],[26,7],[26,57],[76,32],[6,83],[55,50],[42,27],[21,8],[6,24],[52,69],[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[12,0],[13,0],[14,0],[15,0],[16,0],[17,0],[18,0],[19,0],[20,0],[21,0],[22,0],[23,0],[24,0],[25,0],[26,0],[27,0],[28,0],[29,0],[30,0],[31,0],[32,0],[33,0],[34,0],[35,0],[36,0],[37,0],[38,0],[39,0],[40,0],[41,0],[42,0],[43,0],[44,0],[45,0],[46,0],[47,0],[48,0],[49,0],[50,0],[51,0],[52,0],[53,0],[54,0],[55,0],[56,0],[57,0],[58,0],[59,0],[60,0],[61,0],[62,0],[63,0],[64,0],[65,0],[66,0],[67,0],[68,0],[69,0],[70,0],[71,0],[72,0],[73,0],[74,0],[75,0],[76,0],[77,0],[78,0],[79,0],[80,0],[81,0],[82,0],[83,0],[84,0],[85,0],[86,0],[87,0],[88,0],[89,0],[90,0],[91,0],[92,0],[93,0],[94,0],[95,0],[96,0],[97,0],[98,0],[99,0],[0,100],[1,100],[2,100],[3,100],[4,100],[5,100],[6,100],[7,100],[8,100],[9,100],[10,100],[11,100],[12,100],[13,100],[14,100],[15,100],[16,100],[17,100],[18,100],[19,100],[20,100],[21,100],[22,100],[23,100],[24,100],[25,100],[26,100],[27,100],[28,100],[29,100],[30,100],[31,100],[32,100],[33,100],[34,100],[35,100],[36,100],[37,100],[38,100],[39,100],[40,100],[41,100],[42,100],[43,100],[44,100],[45,100],[46,100],[47,100],[48,100],[49,100],[50,100],[51,100],[52,100],[53,100],[54,100],[55,100],[56,100],[57,100],[58,100],[59,100],[60,100],[61,100],[62,100],[63,100],[64,100],[65,100],[66,100],[67,100],[68,100],[69,100],[70,100],[71,100],[72,100],[73,100],[74,100],[75,100],[76,100],[77,100],[78,100],[79,100],[80,100],[81,100],[82,100],[83,100],[84,100],[85,100],[86,100],[87,100],[88,100],[89,100],[90,100],[91,100],[92,100],[93,100],[94,100],[95,100],[96,100],[97,100],[98,100],[99,100],[100,100],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[0,11],[0,12],[0,13],[0,14],[0,15],[0,16],[0,17],[0,18],[0,19],[0,20],[0,21],[0,22],[0,23],[0,24],[0,25],[0,26],[0,27],[0,28],[0,29],[0,30],[0,31],[0,32],[0,33],[0,34],[0,35],[0,36],[0,37],[0,38],[0,39],[0,40],[0,41],[0,42],[0,43],[0,44],[0,45],[0,46],[0,47],[0,48],[0,49],[0,50],[0,51],[0,52],[0,53],[0,54],[0,55],[0,56],[0,57],[0,58],[0,59],[0,60],[0,61],[0,62],[0,63],[0,64],[0,65],[0,66],[0,67],[0,68],[0,69],[0,70],[0,71],[0,72],[0,73],[0,74],[0,75],[0,76],[0,77],[0,78],[0,79],[0,80],[0,81],[0,82],[0,83],[0,84],[0,85],[0,86],[0,87],[0,88],[0,89],[0,90],[0,91],[0,92],[0,93],[0,94],[0,95],[0,96],[0,97],[0,98],[0,99],[100,0],[100,1],[100,2],[100,3],[100,4],[100,5],[100,6],[100,7],[100,8],[100,9],[100,10],[100,11],[100,12],[100,13],[100,14],[100,15],[100,16],[100,17],[100,18],[100,19],[100,20],[100,21],[100,22],[100,23],[100,24],[100,25],[100,26],[100,27],[100,28],[100,29],[100,30],[100,31],[100,32],[100,33],[100,34],[100,35],[100,36],[100,37],[100,38],[100,39],[100,40],[100,41],[100,42],[100,43],[100,44],[100,45],[100,46],[100,47],[100,48],[100,49],[100,50],[100,51],[100,52],[100,53],[100,54],[100,55],[100,56],[100,57],[100,58],[100,59],[100,60],[100,61],[100,62],[100,63],[100,64],[100,65],[100,66],[100,67],[100,68],[100,69],[100,70],[100,71],[100,72],[100,73],[100,74],[100,75],[100,76],[100,77],[100,78],[100,79],[100,80],[100,81],[100,82],[100,83],[100,84],[100,85],[100,86],[100,87],[100,88],[100,89],[100,90],[100,91],[100,92],[100,93],[100,94],[100,95],[100,96],[100,97],[100,98],[100,99],[100,100],a=[63,19],[94,46],[38,52],[65,53],[31,85],[72,30],[88,28],[25,96],[89,24],[68,22],[12,98],[10,41],[40,76],[36,14],[58,52],[71,23],[83,90],[45,12],[24,51],[40,46],[63,95],[72,91],[82,96],[34,86],[74,95],[89,54],[28,4],[31,37],[80,27],[78,34],[87,25],[66,51],[86,23],[19,70],[54,84],[46,11],[55,93],[31,87],[98,88],[30,15],[16,22],[12,35],[35,89],[67,53],[33,80],[3,69],[45,78],[31,12],[2,93],[78,32],[51,35],[5,62],[22,51],[70,6],[45,16],[11,64],[68,37],[90,39],[85,5],[88,68],[28,38],[11,46],[55,49],[39,48],[36,90],[58,77],[82,70],[36,52],[89,22],[85,55],[90,34],[80,89],[43,11],[72,80],[61,63],[97,69],[77,81],[76,85],[96,31],[79,45],[84,93],[42,26],[29,6],[53,70],[72,11],[22,37],[89,6],[50,66],[29,92],[75,17],[48,31],[60,45],[65,60],[72,73],[66,23],[28,32],[15,14],[42,68],[64,28],[34,11],\""
            string str = reader.GetString();
            string[] msg = str.Split('=', ',');

            Map map = new Map(Convert.ToInt32(msg[1]), Convert.ToInt32(msg[3]), Convert.ToInt32(msg[5]), Convert.ToInt32(msg[7]));
            Game1.viewObjects = new System.Collections.Generic.List<ViewObject>();

            string handler = "";
            for (int i = 8; i < msg.Length; i++)
            {
                if (msg[i] == " p")
                    handler = "pits";
                else if (msg[i] == "r")
                    handler = "rocks";
                else if (msg[i] == "a")
                    handler = "apples";

                if(handler == "pits" && msg[i] != " p")
                {
                    string[] posStr = msg[i].Split(';', '[', ']');
                    map.pits.Add(new Pit(Convert.ToInt32(posStr[1]), Convert.ToInt32(posStr[2])));
                }
                if (handler == "rocks" && msg[i] != "r")
                {
                    string[] posStr = msg[i].Split(';', '[', ']');
                    map.rocks.Add(new Rock(Convert.ToInt32(posStr[1]), Convert.ToInt32(posStr[2])));
                }
                if (handler == "apples" && msg[i] != "a" && msg[i] != "")
                {
                    string[] posStr = msg[i].Split(';', '[', ']');
                    map.apples.Add(new Apple(Convert.ToInt32(posStr[1]), Convert.ToInt32(posStr[2])));
                }
            }

            return map;
        }

        public override void Write(Utf8JsonWriter writer, Map value, JsonSerializerOptions options)
        {
            string msg = $"s={value.Size},pc={value.PitCount},rc={value.RockCount},ac={value.AppleCount}, p=";
            for (int i = 0; i < value.pits.Count; i++)
            {
                msg += $"[{value.pits[i].Pos.X};{value.pits[i].Pos.Y}],";
            }
            msg += "r=";
            for (int i = 0; i < value.rocks.Count; i++)
            {
                msg += $"[{value.rocks[i].Pos.X};{value.rocks[i].Pos.Y}],";
            }
            msg += "a=";
            for (int i = 0; i < value.apples.Count; i++)
            {
                msg += $"[{value.apples[i].Pos.X};{value.apples[i].Pos.Y}],";
            }

            writer.WriteStringValue(msg);
        }
    }
}
